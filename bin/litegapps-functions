# Copyright 2020 - 2024 The Litegapps Project
# Litegapps Functions
# By wahyu6070
#
print(){ ui_print "$1"; }
del (){ rm -rf "$@"; }
cdir (){ mkdir -p "$@"; }
printlog(){
	print "$1"
	}
sedlog(){
	return 0
	}
	
while_log(){
	echo "$1" | tee -a $log
	}
listlog(){
	echo " " >> $log
	echo "---------- Folder List : $1 ----------" >> $log
	for w in $(find "$1" -type f); do
		echo "| $(du -sah $w | cut -f 1) | $w" >> $log
	done
	echo "--------------------------------------" >> $log
	echo " " >> $log
	}

getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }

abort(){
	print " " | tee -a $log
	print "!!! $1" | tee -a $log
	print " " | tee -a $log
	exit 1
	}
	
find_slot() {
  local slot=$(getprop ro.boot.slot_suffix 2>/dev/null);
  [ "$slot" ] || slot=$( grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline |  cut -d\  -f1 |  cut -d= -f2);
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null);
    [ "$slot" ] || slot=$( grep -o 'androidboot.slot=.*$' /proc/cmdline |  cut -d\  -f1 |  cut -d= -f2);
    [ "$slot" ] && slot=_$slot;
  fi;
  [ "$slot" ] && echo "$slot";
}

make_log(){
	#creating log
	if [ $(getp litegapps_type $MODPATH/module.prop) = litegappsx ]; then
		NAME_LOG=`echo "[LOG]litegappsx_$(getp version $MODPATH/module.prop).zip"`
	else
		NAME_LOG=`echo "[LOG]litegapps_$(getp version $MODPATH/module.prop).zip"`
	fi
	
	if [ $DEV_MODE = OFF ]; then
		printlog "- Make log"
	else
		printlog "- Make log to <$LITEGAPPS/$NAME_LOG>"
	fi
	
	getprop > $LITEGAPPS/log/get_prop
	
	for BLOG in $SYSTEM $PRODUCT $SYSTEM_EXT $VENDOR; do
		local BASENAME=`basename $BLOG`
		if [ -f $BLOG/build.prop ]; then
			cp -pf $BLOG/build.prop $LITEGAPPS/log/${BASENAME}_build.prop
		else
			echo "! /${BASENAME} is not detected <$BLOG/build.prop>" >> $LITEGAPPS/log/${BASENAME}_build.prop
		fi
	done
	
	if [ -d $LITEGAPPS/log ]; then
		for TR in $TMPDIR $MODPATH $LITEGAPPS; do
			test -d $TR && listlog $TR
		done
		cd $LITEGAPPS/log
		test -f $LITEGAPPS/$NAME_LOG && del $LITEGAPPS/$NAME_LOG
		$bin/zip -r9 $LITEGAPPS/$NAME_LOG * >/dev/null 2>&1
		cd /
		del $LITEGAPPS/log
	fi
}
report_bug(){
	printlog " "
	printlog "___________________________"
	printlog "| installation failed !!! |"
	printlog "|_________________________|"
	printlog " known error •> $1"
	printlog "___________________________"
	make_log
	printlog " Please report bug !"
	printlog " send log : /sdcard/Android/litegapps/$NAME_LOG"
	printlog " send in group telegram https://t.me/litegappsgroup"
	printlog "____________________________"
	printlog " "
	del $MODPATH
	[ $TYPEINSTALL = "kopi" ] && del $KOPIMOD
	
	if ! $BOOTMODE; then
		#umount
		print "- Umounting partitions";
		restore_env
	fi
	exit 1
}

GET_PROP(){
	local LIST_PROP="
	$SYSTEM/build.prop
	$VENDOR/build.prop
	$PRODUCT/build.prop
	$SYSTEM_EXT/build.prop
	"
	local HJ VARPROP
	for HJ in $LIST_PROP; do
		if [ -f $HJ ] && grep -q "$1" "$HJ" 2>/dev/null; then
			VARPROP=`grep "^$1" "$HJ" | head -n1 | cut -d = -f 2`
			break
		fi
	done
	
	if [ "$VARPROP" ]; then
		echo "$VARPROP"
	elif [ "$(getprop $1)" ]; then
		getprop $1
	else
		return 1
	fi
	
	}
get_android_codename(){
	local input=$1
	case $input in
		21) echo "Lollipop" ;;
		22) echo "Lollipop" ;;
		23) echo "Marshmallow" ;;
		24) echo "Nougat" ;;
		25) echo "Nougat" ;;
		26) echo "Oreo" ;;
		27) echo "Oreo" ;;
		28) echo "Pie" ;;
		29) echo "Quince Tart" ;;
		30) echo "Red Velvet Cake" ;;
		31) echo "Snow Cone" ;;
		32) echo "Snow Cone V2" ;;
		33) echo "Tiramisu" ;;
		34) echo "Upside Down Cake" ;;
		35) echo "Vanilla Ice Cream" ;;
		*) echo "null" ;;
	 esac
	}
INFO(){
MODULEVERSION=`getp version $MODPATH/module.prop`
MODULECODE=`getp versionCode $MODPATH/module.prop`
MODULENAME=`getp name $MODPATH/module.prop`
MODULEANDROID=`getp android $MODPATH/module.prop`
MODULEDATE=`getp date $MODPATH/module.prop`
MODULEAUTHOR=`getp author $MODPATH/module.prop`

printlog "____________________________________"
printlog "|"
case $1 in
install)
printlog "| Mode            : Install"
;;
uninstall)
printlog "| Mode            : Uninstall"
;;
*)
printlog "| Mode            : Not Detected"
;;
esac
printlog "| Name            : $MODULENAME"
printlog "| Version         : $MODULEVERSION"
printlog "| Build date      : $MODULEDATE"
printlog "| By              : $MODULEAUTHOR"
case $TYPEINSTALL in
magisk)
printlog "| Install As      : systemless (Magisk Module)"
;;
ksu)
printlog "| Install As      : systemless (KSU Module)"
;;
*)
printlog "| Install As      : non systemless"
;;
esac
printlog "|___________________________________"
printlog "|"
printlog "| Website         : https://litegapps.github.io"
printlog "| Telegram        : https://t.me/litegapps"
printlog "|___________________________________"
printlog "|              Device Info"
printlog "| Name Rom        : $(GET_PROP ro.build.display.id)"
if [ "$(GET_PROP ro.product.vendor.model)" ]; then
printlog "| Device          : $(GET_PROP ro.product.vendor.model)"
elif [ "$(GET_PROP ro.product.model)" ]; then
printlog "| Device          : $(GET_PROP ro.product.model)"
else
printlog "| Device          : null"
fi

if [ "$(GET_PROP ro.product.vendor.device)" ]; then
printlog "| Codename        : $(GET_PROP ro.product.vendor.device)"
elif [ "$(GET_PROP ro.product.device)" ]; then
printlog "| Codename        : $(GET_PROP ro.product.device)"
else
printlog "| Codename        : null"
fi
printlog "| Android Version : $(GET_PROP ro.build.version.release) ($(get_android_codename $(GET_PROP ro.build.version.sdk)))"
printlog "| Architecture    : $ARCH"
printlog "| Api             : $(GET_PROP ro.build.version.sdk)"
printlog "| Density         : $(GET_PROP ro.sf.lcd_density)"
if [ $(getprop ro.build.ab_update) = "true" ]; then
	printlog "| Seamless        : A/B (slot $(find_slot))"
else
	printlog "| Seamless        : A only"
fi
sedlog "| BootMode        : $BOOTMODE"
sedlog "| System          : $SYSTEM"
printlog "|___________________________________"
sedlog "|          Developer Mode"
sedlog "| Boot Mode    : $BOOTMODE"
sedlog "| System       : $SYSTEM"
if [ -f /dev/block/by-name/super ]; then
	dynamic3=true
else
	dynamic3=false
fi
sedlog "| Dynamic Partition : $dynamic3"
sedlog "| Litegapps Type : $(getp litegapps_type $MODPATH/module.prop)"
sedlog "| Litegapps Compress : $(getp litegapps_apk_compress $MODPATH/module.prop)"
sedlog "|___________________________________"
sedlog "             Memory Info"
for W897 in /data /system /product /system_ext /vendor /dev; do
		if [ -d $W897 ]; then
		local FILESYSTEM=`df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f1`
		sedlog " Partition  = $W897"
		sedlog " Filesystem = $FILESYSTEM"
		sedlog " Mounted on = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f6)"
		sedlog " Free       = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f4)"
		sedlog " Usage      = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f3)"
		sedlog " Total      = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f2)"
		sedlog " Used %     = $(df -h $W897 | tail -n 1 | tr -s ' ' | cut -d' ' -f5)"
		sedlog " Type       = $(mount | grep $FILESYSTEM | tail -n 1 | tr -s ' ' | cut -d' ' -f5)"
		sedlog "____________________________________________"
		sedlog " "
		fi
done
}

ch_con(){
chcon -h u:object_r:system_file:s0 "$1" || sedlog "Failed chcon $1"
}

ch_con_r(){
chcon -hR u:object_r:system_file:s0 "$1" || sedlog "Failed chcon $1"
}

terminal_tips(){
	print " "
	print "  Thanks for using litegapps 😁"
	print " "
	printlog "*Tips"
	print "- Open Terminal"
	print "- su"
	print "- litegapps"
	print " "
	print " "
	}

	
partition_check(){
	printlog "- Checking Partition"
	mount > $LITEGAPPS/log/mount.txt
	for R in $SYSTEM $PRODUCT $SYSTEM_EXT; do
		if [ -d $R ] && [ "$(ls -A $R)" ]; then
			touch $R/litegapps_4678
			if [ -f $R/litegapps_4678 ]; then
				sedlog "<$R> is mount RW"
				del $R/litegapps_4678
			else
				sedlog "<$R> is mount RO"
			fi
		fi
	done
	}
get_android_version(){
	local input=$1
	case $input in
		21) echo 5.0 ;;
		22) echo 5.1 ;;
		23) echo 6.0 ;;
		24) echo 7.0 ;;
		25) echo 7.1 ;;
		26) echo 8.0 ;;
		27) echo 8.1 ;;
		28) echo 9.0 ;;
		29) echo 10.0 ;;
		30) echo 11.0 ;;
		31) echo 12.0 ;;
		32) echo 12.1 ;;
		33) echo 13.0 ;;
		34) echo 14.0 ;;
		35) echo 15.0 ;;
		*) echo null ;;
	 esac
	}
litegappsx(){
	test ! -d $TMPDIR/$ARCH/$API && cdir $TMPDIR/$ARCH/$API
	#sdk
	if [ -d $TMPDIR/cross_sdk/$API ]; then
		cp -af $TMPDIR/cross_sdk/$API/* $TMPDIR/$ARCH/$API/
	else
		print "+ Architecture Support"
		for A1 in $(ls -1 $TMPDIR/arch); do
			printlog "         $A1"
		done
		print "+ Android Version Support"
		for A2 in $(ls -1 $TMPDIR/cross_sdk); do
			printlog "         $(get_android_version $A2)"
		done
		report_bug "Your Android Version Not Support (litegappsX)"
	fi

	#arch
	if [ -d $TMPDIR/arch/$ARCH ]; then
		if [ $API -gt 28 ]; then
			cdir  $TMPDIR/$ARCH/$API/system/product
			cp -af $TMPDIR/arch/$ARCH/system/* $TMPDIR/$ARCH/$API/system/product/
		else
			cp -af $TMPDIR/arch/$ARCH/* $TMPDIR/$ARCH/$API/
		fi
	fi
	
	#croos system
	if [ -d $TMPDIR/cross_system ]; then
		if [ $API -gt 28 ]; then
			cdir $TMPDIR/$ARCH/$API/system/product
			cp -af $TMPDIR/cross_system/system/* $TMPDIR/$ARCH/$API/system/product
		else
			cp -af $TMPDIR/cross_system/* $TMPDIR/$ARCH/$API/
		fi
	fi
	
	
	}
	
INITIAL(){
	local mode=$1
	#path
	if [ -f /system_root/system/build.prop ]; then
		SYSTEM=/system_root/system 
	elif [ -f /system_root/build.prop ]; then
		SYSTEM=/system_root
	elif [ -f /system/system/build.prop ]; then
		SYSTEM=/system/system
	else
		SYSTEM=/system
	fi

	if [ ! -L $SYSTEM/vendor ]; then
		VENDOR=$SYSTEM/vendor
	else
		VENDOR=/vendor
	fi

	# /product dir (android 10+)
	if [ ! -L $SYSTEM/product ]; then
		PRODUCT=$SYSTEM/product
	else
		PRODUCT=/product
	fi

	# /system_ext dir (android 11+)
	if [ ! -L $SYSTEM/system_ext ]; then
		SYSTEM_EXT=$SYSTEM/system_ext
	else
		SYSTEM_EXT=/system_ext
	fi
	
	
	[ "TMPDIR" ] || TMPDIR=/dev/tmp
	LITEGAPPS=/data/media/0/Android/litegapps
	log=$LITEGAPPS/log/litegapps.log
	files=$MODPATH/files

	#detected build.prop
	[ ! -f $SYSTEM/build.prop ] && report_bug "System build.prop not found"


	[ $API ] || API=$(getp ro.build.version.sdk $SYSTEM/build.prop)
	[ $ARCH ] || ARCH=$(getp ro.product.cpu.abi $SYSTEM/build.prop | cut -d '-' -f -1)

	case $ARCH in
	arm64) ARCH=arm64 ;;
	armeabi | arm) ARCH=arm ;;
	x86) ARCH=x86 ;;
	x86_64) ARCH=x86_64 ;;
	*) report_bug " <$ARCH> Your Architecture Not Support" ;;
	esac


	#mode installation
	if [ ! $TYPEINSTALL ] && [ $KSU ]; then
	TYPEINSTALL=ksu
	elif [ ! $TYPEINSTALL ] && [ ! $KSU ]; then
	TYPEINSTALL=magisk
	elif [ $TYPEINSTALL = "ksu" ]; then
	TYPEINSTALL=ksu
	sedlog "- Type install KOPI installer convert to ksu module"a
	elif [ $TYPEINSTALL = "magisk" ]; then
	TYPEINSTALL=magisk
	sedlog "- Type install KOPI installer convert to magisk module"
	elif [ $TYPEINSTALL = "kopi" ]; then
	TYPEINSTALL=kopi
	sedlog "- Type install KOPI installer convert to kopi module"
	else
	TYPEINSTALL=kopi
	sedlog "- Type install is not found, use default to kopi module"
	fi


	# Test /data rw partition
	case $TYPEINSTALL in
	magisk | ksu )
	DIR_TEST=/data/adb/test8989
	cdir $DIR_TEST
	touch $DIR_TEST/io
	[ -f $DIR_TEST/io ] && del $DIR_TEST || report_bug "/data partition is encrypt or read only"
	;;
	esac

	for CCACHE in $LITEGAPPS/log; do
		test -d $CCACHE && del $CCACHE && cdir $CCACHE || cdir $CCACHE
	done

	#functions litegapps info module.prop and build.prop
	INFO $mode
	print " "
		
}

SET_PERM_PARTITION (){
	#Permissions
	printlog "- Set Permissions"
	for setperm_dir in $(find $MODPATH/system -type d 2>/dev/null); do
		sedlog "- Set chcon dir : $setperm_dir"
		ch_con $setperm_dir
		sedlog "- Set chmod 755 dir : $setperm_dir"
		chmod 755 $setperm_dir
	done

	for setperm_file in $(find $MODPATH/system -type f 2>/dev/null); do
		sedlog "- Set chcon file : $setperm_file"
		ch_con $setperm_file
		sedlog "- Set chmod 644 file : $setperm_file"
		chmod 644 $setperm_file
	done
	
	}
	
PARTITION_MEM_CHECK(){
# cheking memory partition
# $STSTEM $PRODUCT $SYSTEM_EXT is variable in kopi installer
if [ $TYPEINSTALL = kopi ]; then
	printlog "- Checking Memory"
	if [ -d $MODPATH/system ] && [ ! -d $MODPATH/system/product ] && [ ! -d $MODPATH/system/system_ext ] && [ "$(ls -A $MODPATH/system)" ]; then
		MEM_INSTALL=`du -sk $MODPATH/system | cut -f1`
		MEM_PARTITION=`df -k $SYSTEM | tail -n 1 | tr -s ' ' | cut -d' ' -f3`
		if [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -gt "$MEM_INSTALL" ]; then
			sedlog " memory partition $SYSTEM"
			sedlog " memory install = $MEM_INSTALL kb"
			sedlog " memory free partition $SYSTEM : $MEM_PARTITION kb"
			sedlog " free space is [OK]"
		elif [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -le "$MEM_INSTALL" ]; then
			printlog "! memory partition $SYSTEM"
			printlog "! memory install = $MEM_INSTALL kb"
			printlog "! memory free partition $SYSTEM : $MEM_PARTITION kb"
			printlog "! free space is [ERROR] full memory"
			report_bug "$SYSTEM partition memory is full"
		else
			sedlog "! memory partition $SYSTEM is not detected size"
		fi
	fi
	if [ -d $MODPATH/system/product ] && [ "$(ls -A $MODPATH/system/product)" ]; then
		MEM_INSTALL=`du -sk $MODPATH/system/product | cut -f1`
		MEM_PARTITION=`df -k $PRODUCT | tail -n 1 | tr -s ' ' | cut -d' ' -f3`
		if [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -gt $"MEM_INSTALL" ]; then
			sedlog " memory partition $PRODUCT"
			sedlog " memory install = $MEM_INSTALL kb"
			sedlog " memory free partition $PRODUCT : $MEM_PARTITION kb"
			sedlog " free space is [OK]"
		elif [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -le "$MEM_INSTALL" ]; then
			printlog "! memory partition $PRODUCT"
			printlog "! memory install = $MEM_INSTALL kb"
			printlog "! memory free partition $PRODUCT : $MEM_PARTITION kb"
			printlog "! free space is [ERROR] full memory"
			report_bug "$PRODUCT partition memory is full"
		else
			sedlog "! memory partition $PRODUCT is not detected size"
		fi
	fi
	if [ -d $MODPATH/system/system_ext ] && [ "$(ls -A $MODPATH/system/system_ext)" ]; then
		MEM_INSTALL=`du -sk $MODPATH/system/system_ext | cut -f1`
		MEM_PARTITION=`df -k $SYSTEM_EXT | tail -n 1 | tr -s ' ' | cut -d' ' -f3`
		if [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -gt "$MEM_INSTALL" ]; then
			sedlog " memory partition $SYSTEM_EXT"
			sedlog " memory install = $MEM_INSTALL kb"
			sedlog " memory free partition $SYSTEM_EXT : $MEM_PARTITION kb"
			sedlog " free space is [OK]"
		elif [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -le "$MEM_INSTALL" ]; then
			printlog "! memory partition $SYSTEM_EXT"
			printlog "! memory install = $MEM_INSTALL kb"
			printlog "! memory free partition $SYSTEM_EXT : $MEM_PARTITION kb"
			printlog "! free space is [ERROR] full memory"
			report_bug "$SYSTEM_EXT partition memory is full"
		else
			sedlog "! memory partition $SYSTEM_EXT is not detected size"
		fi
		
	fi
else
	if [ -d $MODPATH/system ] && [ "$(ls -A $MODPATH/system)" ]; then
		MEM_INSTALL=`du -sk $MODPATH/system | cut -f1`
		MEM_PARTITION=`df -k /data | tail -n 1 | tr -s ' ' | cut -d' ' -f3`
		if [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -gt "$MEM_INSTALL" ]; then
			sedlog " memory partition /data"
			sedlog " memory install = $MEM_INSTALL kb"
			sedlog " memory free partition /data : $MEM_PARTITION kb"
			sedlog " free space is [OK]"
		elif [ "$MEM_PARTITION" -eq "$MEM_PARTITION" ] && [ "$MEM_PARTITION" -le "$MEM_INSTALL" ]; then
			printlog "! memory partition /data"
			printlog "! memory install = $MEM_INSTALL kb"
			printlog "! memory free partition /data : $MEM_PARTITION kb"
			printlog "! free space is [ERROR] full memory"
			report_bug "/data partition memory is full"
		else
			sedlog "! memory partition /data is not detected size"
		fi
	fi

fi
}

set_prop() {
  local property="$1"
  local value="$2"
  file_location="$3"
  if grep -q "${property}" "${file_location}"; then
    sed -i "s/\(${property}\)=.*/\1=${value}/g" "${file_location}"
  else
    echo "${property}=${value}" >>"${file_location}"
  fi
}
